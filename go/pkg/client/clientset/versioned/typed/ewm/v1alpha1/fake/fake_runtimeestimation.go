// Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
//
// This file is part of ewm-cloud-robotics
// (see https://github.com/SAP/ewm-cloud-robotics).
//
// This file is licensed under the Apache Software License, v. 2 except as noted
// otherwise in the LICENSE file (https://github.com/SAP/ewm-cloud-robotics/blob/master/LICENSE)
//

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/SAP/ewm-cloud-robotics/go/pkg/apis/ewm/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeRunTimeEstimations implements RunTimeEstimationInterface
type FakeRunTimeEstimations struct {
	Fake *FakeEwmV1alpha1
	ns   string
}

var runtimeestimationsResource = schema.GroupVersionResource{Group: "ewm.sap.com", Version: "v1alpha1", Resource: "runtimeestimations"}

var runtimeestimationsKind = schema.GroupVersionKind{Group: "ewm.sap.com", Version: "v1alpha1", Kind: "RunTimeEstimation"}

// Get takes name of the runTimeEstimation, and returns the corresponding runTimeEstimation object, and an error if there is any.
func (c *FakeRunTimeEstimations) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.RunTimeEstimation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(runtimeestimationsResource, c.ns, name), &v1alpha1.RunTimeEstimation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RunTimeEstimation), err
}

// List takes label and field selectors, and returns the list of RunTimeEstimations that match those selectors.
func (c *FakeRunTimeEstimations) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.RunTimeEstimationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(runtimeestimationsResource, runtimeestimationsKind, c.ns, opts), &v1alpha1.RunTimeEstimationList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.RunTimeEstimationList{ListMeta: obj.(*v1alpha1.RunTimeEstimationList).ListMeta}
	for _, item := range obj.(*v1alpha1.RunTimeEstimationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested runTimeEstimations.
func (c *FakeRunTimeEstimations) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(runtimeestimationsResource, c.ns, opts))

}

// Create takes the representation of a runTimeEstimation and creates it.  Returns the server's representation of the runTimeEstimation, and an error, if there is any.
func (c *FakeRunTimeEstimations) Create(ctx context.Context, runTimeEstimation *v1alpha1.RunTimeEstimation, opts v1.CreateOptions) (result *v1alpha1.RunTimeEstimation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(runtimeestimationsResource, c.ns, runTimeEstimation), &v1alpha1.RunTimeEstimation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RunTimeEstimation), err
}

// Update takes the representation of a runTimeEstimation and updates it. Returns the server's representation of the runTimeEstimation, and an error, if there is any.
func (c *FakeRunTimeEstimations) Update(ctx context.Context, runTimeEstimation *v1alpha1.RunTimeEstimation, opts v1.UpdateOptions) (result *v1alpha1.RunTimeEstimation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(runtimeestimationsResource, c.ns, runTimeEstimation), &v1alpha1.RunTimeEstimation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RunTimeEstimation), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeRunTimeEstimations) UpdateStatus(ctx context.Context, runTimeEstimation *v1alpha1.RunTimeEstimation, opts v1.UpdateOptions) (*v1alpha1.RunTimeEstimation, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(runtimeestimationsResource, "status", c.ns, runTimeEstimation), &v1alpha1.RunTimeEstimation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RunTimeEstimation), err
}

// Delete takes name of the runTimeEstimation and deletes it. Returns an error if one occurs.
func (c *FakeRunTimeEstimations) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(runtimeestimationsResource, c.ns, name), &v1alpha1.RunTimeEstimation{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRunTimeEstimations) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(runtimeestimationsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.RunTimeEstimationList{})
	return err
}

// Patch applies the patch and returns the patched runTimeEstimation.
func (c *FakeRunTimeEstimations) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.RunTimeEstimation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(runtimeestimationsResource, c.ns, name, pt, data, subresources...), &v1alpha1.RunTimeEstimation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RunTimeEstimation), err
}
