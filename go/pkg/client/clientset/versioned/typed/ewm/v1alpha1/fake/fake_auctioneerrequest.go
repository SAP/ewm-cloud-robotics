// Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
//
// This file is part of ewm-cloud-robotics
// (see https://github.com/SAP/ewm-cloud-robotics).
//
// This file is licensed under the Apache Software License, v. 2 except as noted
// otherwise in the LICENSE file (https://github.com/SAP/ewm-cloud-robotics/blob/master/LICENSE)
//

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/SAP/ewm-cloud-robotics/go/pkg/apis/ewm/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAuctioneerRequests implements AuctioneerRequestInterface
type FakeAuctioneerRequests struct {
	Fake *FakeEwmV1alpha1
	ns   string
}

var auctioneerrequestsResource = schema.GroupVersionResource{Group: "ewm.sap.com", Version: "v1alpha1", Resource: "auctioneerrequests"}

var auctioneerrequestsKind = schema.GroupVersionKind{Group: "ewm.sap.com", Version: "v1alpha1", Kind: "AuctioneerRequest"}

// Get takes name of the auctioneerRequest, and returns the corresponding auctioneerRequest object, and an error if there is any.
func (c *FakeAuctioneerRequests) Get(name string, options v1.GetOptions) (result *v1alpha1.AuctioneerRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(auctioneerrequestsResource, c.ns, name), &v1alpha1.AuctioneerRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuctioneerRequest), err
}

// List takes label and field selectors, and returns the list of AuctioneerRequests that match those selectors.
func (c *FakeAuctioneerRequests) List(opts v1.ListOptions) (result *v1alpha1.AuctioneerRequestList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(auctioneerrequestsResource, auctioneerrequestsKind, c.ns, opts), &v1alpha1.AuctioneerRequestList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.AuctioneerRequestList{ListMeta: obj.(*v1alpha1.AuctioneerRequestList).ListMeta}
	for _, item := range obj.(*v1alpha1.AuctioneerRequestList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested auctioneerRequests.
func (c *FakeAuctioneerRequests) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(auctioneerrequestsResource, c.ns, opts))

}

// Create takes the representation of a auctioneerRequest and creates it.  Returns the server's representation of the auctioneerRequest, and an error, if there is any.
func (c *FakeAuctioneerRequests) Create(auctioneerRequest *v1alpha1.AuctioneerRequest) (result *v1alpha1.AuctioneerRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(auctioneerrequestsResource, c.ns, auctioneerRequest), &v1alpha1.AuctioneerRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuctioneerRequest), err
}

// Update takes the representation of a auctioneerRequest and updates it. Returns the server's representation of the auctioneerRequest, and an error, if there is any.
func (c *FakeAuctioneerRequests) Update(auctioneerRequest *v1alpha1.AuctioneerRequest) (result *v1alpha1.AuctioneerRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(auctioneerrequestsResource, c.ns, auctioneerRequest), &v1alpha1.AuctioneerRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuctioneerRequest), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeAuctioneerRequests) UpdateStatus(auctioneerRequest *v1alpha1.AuctioneerRequest) (*v1alpha1.AuctioneerRequest, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(auctioneerrequestsResource, "status", c.ns, auctioneerRequest), &v1alpha1.AuctioneerRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuctioneerRequest), err
}

// Delete takes name of the auctioneerRequest and deletes it. Returns an error if one occurs.
func (c *FakeAuctioneerRequests) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(auctioneerrequestsResource, c.ns, name), &v1alpha1.AuctioneerRequest{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAuctioneerRequests) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(auctioneerrequestsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.AuctioneerRequestList{})
	return err
}

// Patch applies the patch and returns the patched auctioneerRequest.
func (c *FakeAuctioneerRequests) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AuctioneerRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(auctioneerrequestsResource, c.ns, name, pt, data, subresources...), &v1alpha1.AuctioneerRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AuctioneerRequest), err
}
