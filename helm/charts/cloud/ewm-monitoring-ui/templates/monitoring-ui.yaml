apiVersion: v1
kind: Secret
metadata:
  name: ewm-odata-api
type: Opaque
## Usage of 'stringData' field rather than 'data' to leverage automatic base64 en-/decoding 
## (ref. https://kubernetes.io/docs/concepts/configuration/secret/#creating-a-secret-manually)
stringData:
  ewmhost: "{{ .Values.envs.ewmhost }}"
  ewmauth: "{{ .Values.envs.ewmauth }}"
  ewmuser: "{{ .Values.envs.ewmuser }}"
  ewmpswd: "{{ .Values.envs.ewmpassword }}"
  ewmpath: "{{ .Values.envs.ewmbasepath }}"
  ewmnewpath: "{{ .Values.envs.ewmnewpath }}"
  ewmclid: "{{ .Values.envs.ewmclientid }}"
  ewmclse: "{{ .Values.envs.ewmclientsecret }}"
  ewmtkep: "{{ .Values.envs.ewmtokenendpoint }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ewm-monitoring-ui-nginx
data:
  openui5app.conf: |-
    server {
       listen      80;
       server_name  _;
       location / {
           root /app;
       }
       location /robots/ {
           proxy_pass http://localhost:8001/apis/registry.cloudrobotics.com/v1alpha1/namespaces/default/robots/;
           proxy_set_header Accept-Encoding "";
           sub_filter_once off;
           sub_filter_types *;
           sub_filter '/apis/registry.cloudrobotics.com/v1alpha1/namespaces/default' '{{ $.Values.nginxpath }}';
       }
       location /warehouseorders/ {
           proxy_pass http://localhost:8002/apis/ewm.sap.com/v1alpha1/namespaces/default/warehouseorders/;
           proxy_set_header Accept-Encoding "";
           sub_filter_once off;
           sub_filter_types *;
           sub_filter '/apis/ewm.sap.com/v1alpha1/namespaces/default' '{{ $.Values.nginxpath }}';
       }
       location /robotconfigurations/ {
           proxy_pass http://localhost:8003/apis/ewm.sap.com/v1alpha1/namespaces/default/robotconfigurations/;
           proxy_set_header Accept-Encoding "";
           sub_filter_once off;
           sub_filter_types *;
           sub_filter '/apis/ewm.sap.com/v1alpha1/namespaces/default' '{{ $.Values.nginxpath }}';
       }
       include /odata/location.conf;
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-ui
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: monitoring-ui
  template:
    metadata:
      labels:
        app: monitoring-ui
    spec:
      volumes:
      - name: nginx-configmap-volume
        configMap:
          name: ewm-monitoring-ui-nginx
      containers:
      - name: kubectl-proxy-robots
        image: bitnami/kubectl:latest
        args: ["proxy", "--port=8001", "--accept-paths=^/apis/registry.cloudrobotics.com/v1alpha1/namespaces/default/robots/*", "--reject-methods='DELETE,POST,PUT,PATCH'"]
      - name: kubectl-proxy-warehouseorders
        image: bitnami/kubectl:latest
        args: ["proxy", "--port=8002", "--accept-paths=^/apis/ewm.sap.com/v1alpha1/namespaces/default/warehouseorders/*", "--reject-methods='DELETE,POST,PUT,PATCH'"]
      - name: kubectl-proxy-robotconfigurations
        image: bitnami/kubectl:latest
        args: ["proxy", "--port=8003", "--accept-paths=^/apis/ewm.sap.com/v1alpha1/namespaces/default/robotconfigurations/*", "--reject-methods='DELETE,POST'"]
      - name: nginx-openui5
        image: {{ .Values.image.repository }}{{ if .Values.image.tag }}:{{ .Values.image.tag }}{{ end }}
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: nginx-configmap-volume
        env:
        - name: CLOUD_ROBOTICS_DOMAIN
          value: {{ $.Values.domain }}
        - name: ODATA_USER
          valueFrom:
            secretKeyRef:
              name: ewm-odata-api
              key: ewmuser
        - name: ODATA_HOST
          valueFrom:
            secretKeyRef:
              name: ewm-odata-api
              key: ewmhost
        - name: ODATA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ewm-odata-api
              key: ewmpswd
        - name: ODATA_AUTH
          valueFrom:
            secretKeyRef:
              name: ewm-odata-api
              key: ewmauth
        - name: ODATA_BASEPATH
          valueFrom:
            secretKeyRef:
              name: ewm-odata-api
              key: ewmpath
        - name: ODATA_NEWPATH
          valueFrom:
            secretKeyRef:
              name: ewm-odata-api
              key: ewmnewpath
        - name: ODATA_CLIENTID
          valueFrom:
            secretKeyRef:
              name: ewm-odata-api
              key: ewmclid
        - name: ODATA_CLIENTSECRET
          valueFrom:
            secretKeyRef:
              name: ewm-odata-api
              key: ewmclse
        - name: ODATA_TOKENENDPOINT
          valueFrom:
            secretKeyRef:
              name: ewm-odata-api
              key: ewmtkep
        - name: ZEROLOG_CONFIG
          value: json
---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-ui
  labels:
    app: monitoring-ui
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
  selector:
    app: monitoring-ui
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: monitoring-ui
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.default.svc.cluster.local/apis/core.token-vendor/v1/token.verify"
    nginx.ingress.kubernetes.io/auth-signin: "https://{{ $.Values.domain }}/oauth2/start?rd=$escaped_request_uri"
    nginx.ingress.kubernetes.io/secure-backends: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /
    # HACK: oauth2-proxy will return 403, but nginx-ingress-controller only handles
    # 401 with an error page.
    nginx.ingress.kubernetes.io/configuration-snippet: |
      error_page 403 = https://{{ $.Values.domain }}/oauth2/start?rd=$escaped_request_uri;
      rewrite ^([^.\?]*[^/])$ $1/ permanent;
spec:
  tls:
  - hosts:
    - {{ $.Values.domain }}
  rules:
  - host: {{ $.Values.domain }}
    http:
      paths:
      - path: {{ $.Values.nginxpath }}
        backend:
          serviceName: monitoring-ui
          servicePort: 80
